-- detect os version
function read_os_version()
  local lines = {}
  local os_id="debian"
  local os_version=0
  for line in io.lines(loader.path.combine(tunables.chrootdir,"etc","os-release")) do
    lines[#lines + 1] = line
  end
  for _,line_val in pairs(lines) do
    if string.match(line_val,'VERSION_ID="%d+%.*%d*"') ~= nil then
      os_version=tonumber(string.match(line_val,'%d+%.*%d*'))
    elseif string.match(line_val,'ID=%w+') ~= nil then
      _,os_id=string.match(line_val,'(ID=)(%w+)')
    end
  end
  return os_id, os_version
end

os_id,os_version=read_os_version()
assert(type(os_id)=="string", "failed to parse os id from etc/os_release file")
assert(type(os_version)=="number", "failed to parse os version from etc/os_release file")

-- detect debian arch (arch label file created by debian download script)
function read_os_arch()
  local arch_label_file = io.open(loader.path.combine(tunables.chrootdir,"arch-label"), "r")
  local arch_label="amd64"
  if arch_label_file then
    arch_label = arch_label_file:read()
    arch_label_file:close()
  end
  return arch_label
end
os_arch=read_os_arch()

-- read fs-layout marker
function read_fs_layout()
  local layout_file = io.open(loader.path.combine(tunables.chrootdir,"fs-layout"), "r")
  local layout="normal"
  if layout_file then
    layout = layout_file:read()
    layout_file:close()
  end
  return layout
end
fs_layout=read_fs_layout()

-- os_oldfs_ver now deprecated, set it depending on fs_layout
os_oldfs_ver=999
if fs_layout=="merged" then
  os_oldfs_ver=0
end

-- set x11 test utility version
tunables.features.x11util_build=os_id.."-"..os_version.."-"..os_arch

-- service function for adding debian chroot mounts depending on detected os_version
function add_debian_mounts()
  if fs_layout=="merged" then
    table.insert(sandbox.setup.mounts, {prio=15,"symlink","usr/bin","bin"})
    table.insert(sandbox.setup.mounts, {prio=15,"symlink","usr/lib","lib"})
    table.insert(sandbox.setup.mounts, {prio=15,"symlink","usr/lib32","lib32"})
    table.insert(sandbox.setup.mounts, {prio=15,"symlink","usr/lib64","lib64"})
    table.insert(sandbox.setup.mounts, {prio=15,"symlink","usr/libx32","libx32"})
    --table.insert(sandbox.setup.mounts, {prio=15,"symlink","usr/sbin","sbin"})
  else
    table.insert(sandbox.setup.mounts, defaults.mounts.bin_ro_mount)
    table.insert(sandbox.setup.mounts, defaults.mounts.lib_ro_mount)
    if os_arch=="amd64" then
      table.insert(sandbox.setup.mounts, defaults.mounts.lib64_ro_mount)
    end
    --table.insert(sandbox.setup.mounts, defaults.mounts.sbin_ro_mount)
  end
end
