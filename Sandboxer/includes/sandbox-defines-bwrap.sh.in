#!/bin/bash

# env lists management functions when using bwrap sandboxing tool
bwrap_env_set=()
bwrap_env_set_cnt=0

bwrap_env_unset=()
bwrap_env_unset_cnt=0

# add env_set entries for "init" process inside sandbox
# list processed by sandboxing tool (bwrap only for now)
# this methods is for indirect env_list processing in case of
# sandboxing tool other than bwrap is added in the future
env_set_add() {
  bwrap_env_set[$bwrap_env_set_cnt]="--setenv"
  bwrap_env_set_cnt=$((bwrap_env_set_cnt+1))
  bwrap_env_set[$bwrap_env_set_cnt]="$1"
  bwrap_env_set_cnt=$((bwrap_env_set_cnt+1))
  bwrap_env_set[$bwrap_env_set_cnt]="$2"
  bwrap_env_set_cnt=$((bwrap_env_set_cnt+1))
}

env_set_add_list() {
  local env_table="$1"
  local env_blk_cnt=1
  while `check_lua_export "$env_table.$env_blk_cnt"`
  do
    env_set_add "${cfg[$env_table.$env_blk_cnt.1]}" "${cfg[$env_table.$env_blk_cnt.2]}"
    env_blk_cnt=$((env_blk_cnt+1))
  done
}

# return 0 if selected entry is in env_set list
env_set_find() {
  local variable="$1"
  local cnt=0
  while [[ $cnt -lt $bwrap_env_set_cnt ]]
  do
    if [[ ${bwrap_env_set[$cnt]} = --setenv ]]; then
      cnt=$((cnt+1))
      if [[ ${bwrap_env_set[$cnt]} = $variable ]]; then
        return 0
      else
        cnt=$((cnt+2))
      fi
    else
      log "error detected at bwrap_env_set list!"
      teardown 1
    fi
  done
  return 1
}

# read selected value, return "" if nothing found
env_set_readval() {
  local variable="$1"
  local cnt=0
  while [[ $cnt -lt $bwrap_env_set_cnt ]]
  do
    if [[ ${bwrap_env_set[$cnt]} = --setenv ]]; then
      cnt=$((cnt+1))
      if [[ ${bwrap_env_set[$cnt]} = $variable ]]; then
        cnt=$((cnt+1))
        echo "${bwrap_env_set[$cnt]}"
        cnt=$((cnt+1))
      else
        cnt=$((cnt+2))
      fi
    else
      log "error detected at bwrap_env_set list!"
      teardown 1
    fi
  done
}

env_set_get_names() {
  local cnt=0
  while [[ $cnt -lt $bwrap_env_set_cnt ]]
  do
    if [[ ${bwrap_env_set[$cnt]} = --setenv ]]; then
      cnt=$((cnt+1))
      echo "${bwrap_env_set[$cnt]}"
      cnt=$((cnt+2))
    else
      log "error detected at bwrap_env_set list!"
      teardown 1
    fi
  done
}

# add env_unset entries for "init" process inside sandbox
env_unset_add() {
  bwrap_env_unset[$bwrap_env_unset_cnt]="--unsetenv"
  bwrap_env_unset_cnt=$((bwrap_env_unset_cnt+1))
  bwrap_env_unset[$bwrap_env_unset_cnt]="$1"
  bwrap_env_unset_cnt=$((bwrap_env_unset_cnt+1))
}

env_unset_add_list() {
  local env_table="$1"
  local env_blk_cnt=1
  while `check_lua_export "$env_table.$env_blk_cnt"`
  do
    env_unset_add "${cfg[$env_table.$env_blk_cnt]}"
    env_blk_cnt=$((env_blk_cnt+1))
  done
}

# return 0 if selected entry is in env_unset list
env_unset_find() {
  local variable="$1"
  local cnt=0
  while [[ $cnt -lt $bwrap_env_unset_cnt ]]
  do
    if [[ ${bwrap_env_unset[$cnt]} = --unsetenv ]]; then
      cnt=$((cnt+1))
      [[ ${bwrap_env_unset[$cnt]} = $variable ]] && return 0
      cnt=$((cnt+1))
    else
      log "error detected at bwrap_env_unset list!"
      teardown 1
    fi
  done
  return 1
}

env_unset_get_names() {
  local cnt=0
  while [[ $cnt -lt $bwrap_env_unset_cnt ]]
  do
    if [[ ${bwrap_env_unset[$cnt]} = --unsetenv ]]; then
      cnt=$((cnt+1))
      echo "${bwrap_env_unset[$cnt]}"
      cnt=$((cnt+1))
    else
      log "error detected at bwrap_env_unset list!"
      teardown 1
    fi
  done
}

bwrap_params=()
bwrap_param_cnt=0

bwrap_add_param() {
  bwrap_params[$bwrap_param_cnt]="$@"
  #debug
  #echo "added: $@"
  bwrap_param_cnt=$((bwrap_param_cnt+1))
}

# for now enforce --new-session parameter
bwrap_add_param "--new-session"

sandbox_init() {
  local cnt=1
  local cnt_min=`get_lua_table_start "sandbox.bwrap"`
  local cnt_max=`get_lua_table_end "sandbox.bwrap"`
  for ((cnt=cnt_min;cnt<cnt_max;++cnt))
  do
    local fld_cnt=1
    local fld_cnt_min=`get_lua_table_start "sandbox.bwrap.$cnt"`
    local fld_cnt_max=`get_lua_table_end "sandbox.bwrap.$cnt"`
    for ((fld_cnt=fld_cnt_min;fld_cnt<fld_cnt_max;++fld_cnt))
    do
      [[ $fld_cnt = 1 ]] && bwrap_add_param "--${cfg[sandbox.bwrap.$cnt.$fld_cnt]}" || bwrap_add_param "${cfg[sandbox.bwrap.$cnt.$fld_cnt]}"
    done
  done
}

sandbox_bind_ro() {
  bwrap_add_param "--ro-bind"
  bwrap_add_param "$1"
  bwrap_add_param "$2"
}

sandbox_bind_rw() {
  bwrap_add_param "--bind"
  bwrap_add_param "$1"
  bwrap_add_param "$2"
}

sandbox_start() {
  "$tools_dir/bwrap_launcher.sh" "${cfg[sandbox.setup.cleanup_on_exit]}" "$lock_dirname" "$basedir" -- "${bwrap_params[@]}" "${bwrap_env_unset[@]}" "${bwrap_env_set[@]}" "/executor/executor" 0 1 "/executor/control" "control" "${cfg[sandbox.setup.security_key]}" &
}
