#!/bin/bash
#detect enable-shm option value
pulse_shm_enabled="true"
for pulse_conf in "/etc/pulse/daemon.conf" "$HOME/.config/pulse/daemon.conf" "/etc/pulse/client.conf" "$HOME/.config/pulse/client.conf"
do
  [[ ! -f $pulse_conf ]] && continue
  while IFS='' read -r line || [[ -n "$line" ]]; do
    if [[ $line =~ ^[[:space:]]*"enable-shm"[[:space:]]*"="[[:space:]]*"no"[[:space:]]*$ ]]; then
      pulse_shm_enabled="false"
    elif [[ $line =~ ^[[:space:]]*"enable-shm"[[:space:]]*"="[[:space:]]*"yes"[[:space:]]*$ ]]; then
      pulse_shm_enabled="true"
    fi
  done < "$pulse_conf"
done
if [[ ${cfg[tunables.features.pulse_skip_sanity_checks]} != true ]]; then
  #get host pulseaudio version
  [[ `2>/dev/null pulseaudio --version` =~ ^"pulseaudio"[[:space:]]([0-9]*)".".*$ ]] && pulseaudio_version=( "${BASH_REMATCH[1]}" )
  [[ -z $pulseaudio_version ]] && log "cannot determine pulseaudio version, sanity check failed." && teardown 1
  # pulseaudio < 9.0 has some bugs, that may lead to it's crash when using with sandboxed env with some options combinations
  if [[ $pulseaudio_version -lt 9 ]]; then
    #/dev/shm mount + pid namespace
    if `check_lua_export "sandbox.tags.devshm"` && `check_lua_export "sandbox.tags.unshare-pid"` && [[ $pulse_shm_enabled = true ]] ; then
      log "sanity check failed: pulseaudio version on your host is < v9.0, and SHM usage seems to be enabled. it may crash, when using sandboxes with BOTH \"defaults.mounts.devshm_mount\" and \"defaults.bwrap.unshare_pid\" options active. cannot proceed, disable one of these options in your sandbox config, or add \"enable-shm = no\" option to your pulseaudio config file. you can also add \"tunables.features.pulse_skip_sanity_checks=true\" to disable this sanity check (if you feel brave)."
      teardown 1
    fi
  fi
else
  log "warning: skipping sanity checks for pulseaudio."
fi
pulse_server="$PULSE_SERVER"
[[ -z $pulse_server ]] && pulse_server=`2>/dev/null xprop -root | grep -E "^PULSE_SERVER.*" | sed -n "s|^PULSE_SERVER(STRING)\s=\s\"\(.*\)\"\$|\1|p"`
# TODO: detect and use alternative methods of communication
pulse_socket=`echo "$pulse_server" | sed -n 's|^unix:\(.*\)$|\1|p'`
pulse_socket_parse() {
  pulse_socket=`echo "$@" | grep -m 1 "module-native-protocol-unix" | sed -n 's|^.*\(socket=\)\([a-Z0-9/._-+]*\).*$|\2|p'`
}
# detect pulse socket location, abort if not found
# TODO: add more complex parsing, for now it only read simple string without spaces or other special symbols
[[ -z $pulse_socket && -f /etc/pulse/default.pa ]] && pulse_socket_parse `cat "/etc/pulse/default.pa"`
[[ -z $pulse_socket && -f $HOME/.config/pulse/default.pa ]] && pulse_socket_parse `cat "$HOME/.config/pulse/default.pa"`
[[ -z $pulse_socket && -f /etc/pulse/system.pa ]] && pulse_socket_parse `cat "/etc/pulse/system.pa"`
[[ -z $pulse_socket ]] && pulse_socket_parse `2>/dev/null pacmd dump`
[[ -z $pulse_socket && -S $XDG_RUNTIME_DIR/pulse/native ]] && pulse_socket="$XDG_RUNTIME_DIR/pulse/native"
[[ -z $pulse_socket && -S /run/user/$uid/pulse/native ]] && pulse_socket="/run/user/$uid/pulse/native"
[[ ! -z $pulse_socket && -S $pulse_socket ]] && pulse_server_is_socket="true"
# skip futher procesing if using unsuported communication method (or failed to detect)
if [[ $pulse_server_is_socket = true || ! -z $pulse_server ]]; then
  # create configuration dir
  mkdir -p "${cfg[tunables.features.pulse_dir]}"
  check_errors
  # remove old configs
  rm -f "${cfg[tunables.features.pulse_dir]}/client.conf"
  rm -f "${cfg[tunables.features.pulse_dir]}/cookie"
  rm -f "${cfg[tunables.features.pulse_dir]}/socket"
  rm -f "${cfg[tunables.features.pulse_dir]}/daemon.conf"
  rm -f "${cfg[tunables.features.pulse_dir]}/default.pa"
  # create client config
  echo "autospawn=no" > "${cfg[tunables.features.pulse_dir]}/client.conf"
  check_errors
  if ! check_lua_export "sandbox.tags.devshm" || [[ ${cfg[tunables.features.pulse_force_disable_shm]} = true || $pulse_shm_enabled = false ]]; then
    [[ ${cfg[tunables.features.pulse_force_disable_shm]} = true || $pulse_shm_enabled = false ]] && log "disabling shm support for pulseaudio" || log "warning: /dev/shm not mounted (no active \"defaults.mounts.devshm_mount\" option detected), disabling shm support for pulseaudio."
    echo "enable-shm=no" >> "${cfg[tunables.features.pulse_dir]}/client.conf"
    check_errors
  fi
  echo "default-server=unix:/etc/pulse/socket" >> "${cfg[tunables.features.pulse_dir]}/client.conf"
  check_errors
  # export default env from tunables.features.pulse_env
  env_set_add_list "tunables.features.pulse_env"
  # if using socket try to hardlink socket
  [[ $pulse_server_is_socket = true ]] && 2>/dev/null ln "$pulse_socket" "${cfg[tunables.features.pulse_dir]}/socket"
  # export socket location env inside sandbox, depending on what communication method is used now
  if [[ $pulse_server_is_socket = true ]]; then
    env_set_add "PULSE_SERVER" "unix:/etc/pulse/socket"
  else
    # TODO: alternative methods of communication
    env_set_add "PULSE_SERVER" "$pulse_server"
  fi
  if [[ ! -z ${cfg[tunables.features.pulse_env_alsa_config]} ]]; then
    if [[ ${cfg[tunables.features.pulse_env_alsa_config]} = unset ]]; then
      env_unset_add "ALSA_CONFIG_PATH"
    elif [[ ${cfg[tunables.features.pulse_env_alsa_config]} != skip ]]; then
      # export tunables.features.pulse_env_alsa_config value as ALSA_CONFIG_PATH to sandbox
      env_set_add "ALSA_CONFIG_PATH" "${cfg[tunables.features.pulse_env_alsa_config]}"
    fi
  elif [[ -z ${cfg[tunables.features.pulse_env_alsa_config]} && ! -z $ALSA_CONFIG_PATH ]]; then
    env_set_add "ALSA_CONFIG_PATH" "$ALSA_CONFIG_PATH"
  fi
  # detect - do we use cookie, and where it is located
  pulse_cookie="$PULSE_COOKIE"
  [[ -z $pulse_cookie ]] && pulse_cookie=`2>/dev/null xprop -root | grep -E "^PULSE_COOKIE.*" | sed -n "s|^PULSE_COOKIE(STRING)\s=\s\"\(.*\)\"\$|\1|p"`
  if [[ ! -z $pulse_cookie ]]; then
    echo "$pulse_cookie" | xxd -r -p - "$basedir/pulse-cookie-from-x11"
    [[ ${PIPESTATUS[*]} = "0 0" ]] && pulse_cookie="$basedir/pulse-cookie-from-x11"
  fi
  [[ -z $pulse_cookie && -f $HOME/.pulse-cookie ]] && pulse_cookie="$HOME/.pulse-cookie"
  [[ -z $pulse_cookie && -f $HOME/.config/pulse/cookie ]] && pulse_cookie="$HOME/.config/pulse/cookie"
  # copy cookie if exist, set env
  if [[ ! -z $pulse_cookie && -f $pulse_cookie ]]; then
    cp "$pulse_cookie" "${cfg[tunables.features.pulse_dir]}/cookie"
    check_errors
    chmod 600 "${cfg[tunables.features.pulse_dir]}/cookie"
    env_set_add "PULSE_COOKIE" "/etc/pulse/cookie"
  else
    [[ ! -z $pulse_cookie ]] && log "warning: cannot copy pulse cookie, debug: pulse_cookie=$pulse_cookie"
  fi
  if [[ $pulse_server_is_socket = true && -S ${cfg[tunables.features.pulse_dir]}/socket ]]; then
    # add rw-mount define for constructed pulse_dir to /etc/pulse
    sandbox_bind_rw "${cfg[tunables.features.pulse_dir]}" "/etc/pulse"
  else
    # add ro-mount define for constructed pulse_dir to /etc/pulse
    sandbox_bind_ro "${cfg[tunables.features.pulse_dir]}" "/etc/pulse"
    if [[ $pulse_server_is_socket = true ]]; then
      touch "${cfg[tunables.features.pulse_dir]}/socket"
      check_errors
      sandbox_bind_rw "$pulse_socket" "/etc/pulse/socket"
    fi
  fi
else
  log "pulseaudio not running or current configuration is not supported, skipping feature activation"
fi
