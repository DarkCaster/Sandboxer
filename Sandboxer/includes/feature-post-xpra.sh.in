#!/bin/bash

#xpra feature

xpra_post_triggered=1

if [[ ! -z $x11host_post_triggered || ! -z $x11host_pre_triggered ]]; then
  log "xpra feature is not compatible with x11host feature. cannot proceed!"
  post_feature_failed=1
fi

if [[ -z $gvfs_post_triggered ]]; then
  log "gvfs_fix feature is required for xpra feature activation. it must be activated before xpra feature. cannot proceed!"
  post_feature_failed=1
fi

if [[ -z $dbus_env ]]; then
  log "dbus feature is required for xpra feature activation. it must be activated before xpra feature. cannot proceed!"
  post_feature_failed=1
fi

if [[ ! -p $basedir/control/xpra.in || ! -p $basedir/control/xpra.out ]]; then
  [[ $post_feature_failed = 0 ]] && (
  #redefine teardown, so it will not accidentally remove sandboxer lock
  teardown() {
    exit 1
  }
  #remove old xpra-daemon.stdout
  rm -f "$basedir/xpra-daemon.stdout"
  check_errors
  cp "$tools_dir/xpra_conf_export.sh" "$basedir/extra"
  check_errors
  chmod 755 "$basedir/extra/xpra_conf_export.sh"
  check_errors
  log "starting new xpra session"
  #execute xpra daemon in background
  exec_profile="xpra"
  if [[ ${cfg[$exec_profile.exec]} = placeholder ]]; then
    cfg[$exec_profile.exec]=""
    for hint in "/usr/bin" "/bin" "/usr/local/bin" "/usr/sbin" "/sbin"
    do
      [[ -x ${cfg[tunables.features.xpra_search_prefix]}$hint/xpra ]] && cfg[$exec_profile.exec]="$hint/xpra" && break
      # log "no xpra binary at ${cfg[tunables.features.xpra_search_prefix]}$hint" # debug
    done
    [[ -z ${cfg[$exec_profile.exec]} ]] && log "xpra binary not found!" && teardown 1
  fi
  . "$includes_dir/channel-open.sh.in"
  mkdir -p "$basedir/control/xpra"
  exec_bg="true"
  exec_bg_pid=""
  exec_args_cnt=1
  exec_args=( "--start=/executor/extra/xpra_conf_export.sh" )
  . "$includes_dir/run-profile.sh.in"
  wait "$exec_bg_pid"
  if [[ $? != 0 ]]; then
    log "xpra exec profile startup failed. executor log output:"
    cat $basedir/control/xpra.log
    teardown 1
  fi
  #wait for output.
  xpra_wait=400
  xpra_conf_done=0
  log "awaiting xpra startup completion and config parameters output. this may take some time."
  while [[ $xpra_wait -ge 1 && $xpra_conf_done = 0 && -p $basedir/control/dbus.in && -p $basedir/control/dbus.out ]]
  do
    sleep 0.050
    if [[ -f $basedir/control/xpra/xpra_conf.out ]]; then
      mapfile -t xpra_conf <"$basedir/control/xpra/xpra_conf.out"
      xpra_conf_line_cnt=0
      while [[ ! -z ${xpra_conf[$xpra_conf_line_cnt]} ]]
      do
        [[ ${xpra_conf[$xpra_conf_line_cnt]} =~ ^"EOF"$ ]] && xpra_conf_done=1 && break
        xpra_conf_line_cnt=$((xpra_conf_line_cnt+1))
      done
    fi
    xpra_wait=$((xpra_wait-1))
  done
  [[ $xpra_conf_done = 0 ]] && log "failed to read xpra configuration from started service, cannot proceed!" && teardown 1
  exit 0
  ) || post_feature_failed=1
  add_watchdog_profile "xpra"
fi

#start xpra client on host_etc_mount
if [[ ! -f $basedir/control/xpra/client.pid ]]; then
  [[ $post_feature_failed = 0 ]] && (
  teardown() {
    exit 1
  }
  log "starting xpra client, this task will be performed in background and it may take some time while it's connecting to sandbox"
  #TODO: try to detect and use some IPC mechanism available in xpra to lower cpu usage and improve speed on local connection
  #TODO: xpra tray enable\disable
  "$tools_dir/xpra_client.sh" "$basedir/control" &
  #TODO: track client connection status, and continue only after connection is established
  exit 0
  ) || post_feature_failed=1
fi

if [[ $post_feature_failed = 0 ]]; then
  xpra_conf_done=0
  if [[ -f $basedir/control/xpra/xpra_conf.out ]]; then
    mapfile -t xpra_conf <"$basedir/control/xpra/xpra_conf.out"
    xpra_conf_line_cnt=0
    while [[ ! -z ${xpra_conf[$xpra_conf_line_cnt]} ]]
    do
      [[ ${xpra_conf[$xpra_conf_line_cnt]} =~ ^([^=]+)=(.*)$ ]] && extra_env_set_add "${BASH_REMATCH[1]}" "${BASH_REMATCH[2]}"
      [[ ${xpra_conf[$xpra_conf_line_cnt]} =~ ^"EOF"$ ]] && xpra_conf_done=1 && break
      xpra_conf_line_cnt=$((xpra_conf_line_cnt+1))
    done
  fi
  # check, do we succeed with reading xpra_conf.out, and do not procced if we are not
  if [[ -z $xpra_conf_done ]]; then
    log "failed to read valid xpra env parameters"
    post_feature_failed=1
  fi
fi
